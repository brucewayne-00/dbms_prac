-- STEP 1: Create tables

CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50),
    dept_id NUMBER,
    salary NUMBER
);

CREATE TABLE Department (
    dept_id NUMBER PRIMARY KEY,
    dept_name VARCHAR2(50)
);

CREATE TABLE Project (
    proj_id NUMBER PRIMARY KEY,
    proj_name VARCHAR2(50),
    dept_id NUMBER
);

CREATE TABLE Works_On (
    emp_id NUMBER,
    proj_id NUMBER,
    hours NUMBER,
    PRIMARY KEY (emp_id, proj_id)
);

-- STEP 2: Insert sample data

INSERT INTO Department VALUES (1, 'HR');
INSERT INTO Department VALUES (2, 'IT');
INSERT INTO Department VALUES (3, 'Finance');

INSERT INTO Employee VALUES (101, 'Alice', 1, 50000);
INSERT INTO Employee VALUES (102, 'Bob', 2, 60000);
INSERT INTO Employee VALUES (103, 'Charlie', 2, 55000);
INSERT INTO Employee VALUES (104, 'David', 3, 45000);
INSERT INTO Employee VALUES (105, 'Eve', NULL, 40000);

INSERT INTO Project VALUES (201, 'ProjectX', 2);
INSERT INTO Project VALUES (202, 'ProjectY', 2);
INSERT INTO Project VALUES (203, 'ProjectZ', 3);

INSERT INTO Works_On VALUES (102, 201, 20);
INSERT INTO Works_On VALUES (103, 202, 15);
INSERT INTO Works_On VALUES (104, 203, 30);
INSERT INTO Works_On VALUES (102, 202, 10);

COMMIT;

-- STEP 3: Queries

-- 3.1 INNER JOIN: Employees with their departments
SELECT e.emp_name, d.dept_name
FROM Employee e
JOIN Department d ON e.dept_id = d.dept_id;

-- 3.2 LEFT JOIN: All employees with departments (NULL if no dept)
SELECT e.emp_name, d.dept_name
FROM Employee e
LEFT JOIN Department d ON e.dept_id = d.dept_id;

-- 3.3 RIGHT JOIN: All departments with employees (NULL if no employee)
SELECT e.emp_name, d.dept_name
FROM Employee e
RIGHT JOIN Department d ON e.dept_id = d.dept_id;

-- 3.4 SELF JOIN: Employees in same department pairs
SELECT e1.emp_name AS Emp1, e2.emp_name AS Emp2, e1.dept_id
FROM Employee e1
JOIN Employee e2 ON e1.dept_id = e2.dept_id AND e1.emp_id <> e2.emp_id;

-- 3.5 Subquery: Employees working on more than 1 project
SELECT emp_name
FROM Employee
WHERE emp_id IN (
    SELECT emp_id FROM Works_On
    GROUP BY emp_id
    HAVING COUNT(proj_id) > 1
);

-- 3.6 Correlated Subquery: Employees with salary above dept avg
SELECT emp_name, salary
FROM Employee e
WHERE salary > (
    SELECT AVG(salary) FROM Employee WHERE dept_id = e.dept_id
);

-- 3.7 Create a view: Employee projects and hours
CREATE OR REPLACE VIEW Emp_Project_Hours AS
SELECT e.emp_name, p.proj_name, w.hours
FROM Employee e
JOIN Works_On w ON e.emp_id = w.emp_id
JOIN Project p ON w.proj_id = p.proj_id;

-- 3.8 Query from view: Total hours per employee
SELECT emp_name, SUM(hours) AS total_hours
FROM Emp_Project_Hours
GROUP BY emp_name;

-- 3.9 Subquery with EXISTS: Departments having employees
SELECT dept_name
FROM Department d
WHERE EXISTS (
    SELECT 1 FROM Employee e WHERE e.dept_id = d.dept_id
);

-- 3.10 List employees not assigned to any department
SELECT emp_name
FROM Employee
WHERE dept_id IS NULL;
